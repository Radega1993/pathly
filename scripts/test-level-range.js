/**
 * Script para probar la l√≥gica de rango de niveles
 * Verifica que no se muestre "Pr√≥ximamente" en el √∫ltimo nivel
 */

console.log('üß™ Probando l√≥gica de rango de niveles...\n');

// Simular la funci√≥n getOptimalLevelRange
function getOptimalLevelRange(userProgress, maxLevel, pageSize = 20) {
    // Calcular el nivel actual del usuario (siguiente a completar)
    const currentLevel = userProgress + 1;

    // Determinar el rango √≥ptimo
    let start = Math.max(1, currentLevel - 5); // 5 niveles antes del actual
    let end = Math.min(maxLevel, start + pageSize - 1);

    // Ajustar si estamos cerca del final
    if (end === maxLevel && start > 1) {
        start = Math.max(1, end - pageSize + 1);
    }

    // Solo mostrar "cargar m√°s" si realmente hay m√°s niveles despu√©s del rango actual
    const shouldLoadMore = end < maxLevel;

    console.log(`üéØ Rango √≥ptimo: ${start}-${end}, maxLevel: ${maxLevel}, shouldLoadMore: ${shouldLoadMore}`);

    return { start, end, shouldLoadMore };
}

// Funci√≥n para simular la l√≥gica de agregar "Pr√≥ximamente"
function shouldAddComingSoon(shouldLoadMore, end, totalAvailable) {
    return shouldLoadMore && end < totalAvailable;
}

// Probar diferentes escenarios
function testScenarios() {
    console.log('üìä Probando diferentes escenarios:\n');

    // Escenario 1: Usuario nuevo, pocos niveles disponibles
    console.log('üß™ Escenario 1: Usuario nuevo (0 completados), 10 niveles totales');
    const scenario1 = getOptimalLevelRange(0, 10, 20);
    const shouldAdd1 = shouldAddComingSoon(scenario1.shouldLoadMore, scenario1.end, 10);
    console.log(`   Rango: ${scenario1.start}-${scenario1.end}`);
    console.log(`   shouldLoadMore: ${scenario1.shouldLoadMore}`);
    console.log(`   ¬øAgregar "Pr√≥ximamente"?: ${shouldAdd1 ? 'S√ç ‚ùå' : 'NO ‚úÖ'}\n`);

    // Escenario 2: Usuario intermedio, muchos niveles disponibles
    console.log('üß™ Escenario 2: Usuario intermedio (50 completados), 100 niveles totales');
    const scenario2 = getOptimalLevelRange(50, 100, 20);
    const shouldAdd2 = shouldAddComingSoon(scenario2.shouldLoadMore, scenario2.end, 100);
    console.log(`   Rango: ${scenario2.start}-${scenario2.end}`);
    console.log(`   shouldLoadMore: ${scenario2.shouldLoadMore}`);
    console.log(`   ¬øAgregar "Pr√≥ximamente"?: ${shouldAdd2 ? 'S√ç ‚úÖ' : 'NO ‚ùå'}\n`);

    // Escenario 3: Usuario avanzado, cerca del final
    console.log('üß™ Escenario 3: Usuario avanzado (95 completados), 100 niveles totales');
    const scenario3 = getOptimalLevelRange(95, 100, 20);
    const shouldAdd3 = shouldAddComingSoon(scenario3.shouldLoadMore, scenario3.end, 100);
    console.log(`   Rango: ${scenario3.start}-${scenario3.end}`);
    console.log(`   shouldLoadMore: ${scenario3.shouldLoadMore}`);
    console.log(`   ¬øAgregar "Pr√≥ximamente"?: ${shouldAdd3 ? 'S√ç ‚ùå' : 'NO ‚úÖ'}\n`);

    // Escenario 4: Usuario en el √∫ltimo nivel
    console.log('üß™ Escenario 4: Usuario en √∫ltimo nivel (99 completados), 100 niveles totales');
    const scenario4 = getOptimalLevelRange(99, 100, 20);
    const shouldAdd4 = shouldAddComingSoon(scenario4.shouldLoadMore, scenario4.end, 100);
    console.log(`   Rango: ${scenario4.start}-${scenario4.end}`);
    console.log(`   shouldLoadMore: ${scenario4.shouldLoadMore}`);
    console.log(`   ¬øAgregar "Pr√≥ximamente"?: ${shouldAdd4 ? 'S√ç ‚ùå' : 'NO ‚úÖ'}\n`);

    // Escenario 5: Usuario que complet√≥ todos los niveles
    console.log('üß™ Escenario 5: Usuario complet√≥ todo (100 completados), 100 niveles totales');
    const scenario5 = getOptimalLevelRange(100, 100, 20);
    const shouldAdd5 = shouldAddComingSoon(scenario5.shouldLoadMore, scenario5.end, 100);
    console.log(`   Rango: ${scenario5.start}-${scenario5.end}`);
    console.log(`   shouldLoadMore: ${scenario5.shouldLoadMore}`);
    console.log(`   ¬øAgregar "Pr√≥ximamente"?: ${shouldAdd5 ? 'S√ç ‚ùå' : 'NO ‚úÖ'}\n`);

    // Escenario 6: Caso l√≠mite - exactamente en el final
    console.log('üß™ Escenario 6: Caso l√≠mite - rango termina exactamente en maxLevel');
    const scenario6 = getOptimalLevelRange(80, 100, 20);
    const shouldAdd6 = shouldAddComingSoon(scenario6.shouldLoadMore, scenario6.end, 100);
    console.log(`   Rango: ${scenario6.start}-${scenario6.end}`);
    console.log(`   shouldLoadMore: ${scenario6.shouldLoadMore}`);
    console.log(`   ¬øAgregar "Pr√≥ximamente"?: ${shouldAdd6 ? 'S√ç ‚ùå' : 'NO ‚úÖ'}\n`);
}

// Ejecutar pruebas
testScenarios();

console.log('üéâ Pruebas de rango de niveles completadas!');
console.log('\nüìã Resumen esperado:');
console.log('   ‚úÖ Usuario nuevo: NO mostrar "Pr√≥ximamente"');
console.log('   ‚úÖ Usuario intermedio: S√ç mostrar "Pr√≥ximamente"');
console.log('   ‚úÖ Usuario avanzado: NO mostrar "Pr√≥ximamente"');
console.log('   ‚úÖ Usuario en √∫ltimo nivel: NO mostrar "Pr√≥ximamente"');
console.log('   ‚úÖ Usuario complet√≥ todo: NO mostrar "Pr√≥ximamente"');
console.log('   ‚úÖ Caso l√≠mite: NO mostrar "Pr√≥ximamente"'); 