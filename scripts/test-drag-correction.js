const fs = require('fs');
const path = require('path');

console.log('üéØ Verificando correcci√≥n de arrastre...\n');

// Verificar que el archivo Grid.tsx existe
const gridPath = path.join(__dirname, '..', 'components', 'Grid.tsx');
if (!fs.existsSync(gridPath)) {
    console.error('‚ùå No se encontr√≥ el archivo Grid.tsx');
    process.exit(1);
}

// Leer el contenido del archivo
const gridContent = fs.readFileSync(gridPath, 'utf8');

console.log('üîç Verificando correcciones implementadas:');

const checks = [
    {
        name: 'isDragging no se establece en false en onPanResponderGrant',
        result: !gridContent.includes('setIsDragging(false)') ||
            !gridContent.includes('onPanResponderGrant: (evt) => {') ||
            gridContent.indexOf('setIsDragging(false)') > gridContent.indexOf('onPanResponderGrant: (evt) => {')
    },
    {
        name: 'isDragging se establece en true en onPanResponderMove',
        result: gridContent.includes('setIsDragging(true)')
    },
    {
        name: 'processDragMove no verifica isDragging',
        result: !gridContent.includes('if (!isDragging') ||
            gridContent.includes('if (!dragStartCell)')
    },
    {
        name: 'Logs de debug presentes',
        result: gridContent.includes('console.log(\'üéØ PanResponder: Significant movement detected')
    }
];

let allPassed = true;
checks.forEach(check => {
    const status = check.result ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${check.name}`);
    if (!check.result) allPassed = false;
});

console.log('\nüéÆ Verificando flujo de arrastre:');

const flowChecks = [
    {
        name: 'onStartShouldSetPanResponder retorna true',
        result: gridContent.includes('onStartShouldSetPanResponder: () => {\n                console.log(\'üéØ PanResponder: onStartShouldSetPanResponder - true\');\n                return true')
    },
    {
        name: 'onMoveShouldSetPanResponder detecta movimiento',
        result: gridContent.includes('onMoveShouldSetPanResponder: (evt, gestureState) =>')
    },
    {
        name: 'Timer de long press configurado',
        result: gridContent.includes('const timer = setTimeout(() => {')
    },
    {
        name: 'Cancelaci√≥n de timer en movimiento',
        result: gridContent.includes('clearTimeout(longPressTimer)')
    }
];

flowChecks.forEach(check => {
    const status = check.result ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${check.name}`);
    if (!check.result) allPassed = false;
});

console.log('\nüìä Resumen de la correcci√≥n:');

if (allPassed) {
    console.log('üéâ ¬°La correcci√≥n est√° implementada correctamente!');
    console.log('\n‚úÖ Problemas corregidos:');
    console.log('   ‚Ä¢ isDragging ya no se establece en false al inicio');
    console.log('   ‚Ä¢ isDragging se establece en true cuando hay movimiento');
    console.log('   ‚Ä¢ processDragMove no verifica isDragging innecesariamente');
    console.log('   ‚Ä¢ Logs de debug para diagn√≥stico');

    console.log('\nüöÄ Flujo esperado:');
    console.log('   1. Usuario toca ‚Üí onPanResponderGrant');
    console.log('   2. Timer de long press inicia');
    console.log('   3. Si hay movimiento >5px ‚Üí isDragging = true');
    console.log('   4. Timer se cancela, arrastre activo');
    console.log('   5. processDragMove procesa celdas');

    console.log('\nüß™ Para probar:');
    console.log('   1. Toca una celda y mant√©n presionado');
    console.log('   2. Mueve el dedo >5px');
    console.log('   3. Verifica que isDragging se active');
    console.log('   4. Verifica que processDragMove se ejecute');
    console.log('   5. Verifica que las celdas se agreguen al camino');

} else {
    console.log('‚ùå Hay problemas en la correcci√≥n');
    console.log('\nüîß Revisa:');
    console.log('   ‚Ä¢ Que isDragging no se establezca en false al inicio');
    console.log('   ‚Ä¢ Que isDragging se establezca en true con movimiento');
    console.log('   ‚Ä¢ Que processDragMove funcione sin verificar isDragging');
    console.log('   ‚Ä¢ Que los logs est√©n presentes para diagn√≥stico');
}

console.log('\nüß™ Verificaci√≥n completada.'); 