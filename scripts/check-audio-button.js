#!/usr/bin/env node

/**
 * Script para verificar que el bot√≥n de audio est√© presente en todas las pantallas
 */

const fs = require('fs');
const path = require('path');

console.log('üîä Verificando bot√≥n de audio en todas las pantallas...\n');

// 1. Verificar App.tsx (pantalla principal)
console.log('1Ô∏è‚É£ Verificando App.tsx (pantalla principal)...');
const appPath = path.join(__dirname, '../App.tsx');
if (fs.existsSync(appPath)) {
    const appContent = fs.readFileSync(appPath, 'utf8');

    const hasAudioButton = appContent.includes('audioButton');
    const hasAudioSettingsModal = appContent.includes('AudioSettings');
    const hasHandleShowAudioSettings = appContent.includes('handleShowAudioSettings');
    const hasHandleCloseAudioSettings = appContent.includes('handleCloseAudioSettings');

    console.log('   ‚úÖ Bot√≥n de audio en header:', hasAudioButton);
    console.log('   ‚úÖ Modal de AudioSettings:', hasAudioSettingsModal);
    console.log('   ‚úÖ Funci√≥n handleShowAudioSettings:', hasHandleShowAudioSettings);
    console.log('   ‚úÖ Funci√≥n handleCloseAudioSettings:', hasHandleCloseAudioSettings);

    if (hasAudioButton && hasAudioSettingsModal) {
        console.log('   üéâ Audio configurado correctamente en App.tsx');
    } else {
        console.log('   ‚ö†Ô∏è Audio necesita configuraci√≥n en App.tsx');
    }
} else {
    console.log('   ‚ùå App.tsx no encontrado');
}

// 2. Verificar LevelSelectScreen
console.log('\n2Ô∏è‚É£ Verificando LevelSelectScreen...');
const levelSelectPath = path.join(__dirname, '../screens/LevelSelectScreen.tsx');
if (fs.existsSync(levelSelectPath)) {
    const levelSelectContent = fs.readFileSync(levelSelectPath, 'utf8');

    const hasAudioButton = levelSelectContent.includes('audioButton');
    const hasAudioButtonText = levelSelectContent.includes('audioButtonText');
    const hasOnShowAudioSettings = levelSelectContent.includes('onShowAudioSettings');
    const hasAudioButtonInHeader = levelSelectContent.includes('onPress={onShowAudioSettings}');

    console.log('   ‚úÖ Estilo audioButton:', hasAudioButton);
    console.log('   ‚úÖ Estilo audioButtonText:', hasAudioButtonText);
    console.log('   ‚úÖ Prop onShowAudioSettings:', hasOnShowAudioSettings);
    console.log('   ‚úÖ Bot√≥n en header:', hasAudioButtonInHeader);

    if (hasAudioButton && hasOnShowAudioSettings && hasAudioButtonInHeader) {
        console.log('   üéâ Audio configurado correctamente en LevelSelectScreen');
    } else {
        console.log('   ‚ö†Ô∏è Audio necesita configuraci√≥n en LevelSelectScreen');
    }
} else {
    console.log('   ‚ùå LevelSelectScreen.tsx no encontrado');
}

// 3. Verificar GameScreen
console.log('\n3Ô∏è‚É£ Verificando GameScreen...');
const gameScreenPath = path.join(__dirname, '../screens/GameScreen.tsx');
if (fs.existsSync(gameScreenPath)) {
    const gameScreenContent = fs.readFileSync(gameScreenPath, 'utf8');

    const hasAudioButton = gameScreenContent.includes('audioButton');
    const hasAudioButtonText = gameScreenContent.includes('audioButtonText');
    const hasOnShowAudioSettings = gameScreenContent.includes('onShowAudioSettings');
    const hasAudioButtonInHeader = gameScreenContent.includes('onPress={onShowAudioSettings}');

    console.log('   ‚úÖ Estilo audioButton:', hasAudioButton);
    console.log('   ‚úÖ Estilo audioButtonText:', hasAudioButtonText);
    console.log('   ‚úÖ Prop onShowAudioSettings:', hasOnShowAudioSettings);
    console.log('   ‚úÖ Bot√≥n en header:', hasAudioButtonInHeader);

    if (hasAudioButton && hasOnShowAudioSettings && hasAudioButtonInHeader) {
        console.log('   üéâ Audio configurado correctamente en GameScreen');
    } else {
        console.log('   ‚ö†Ô∏è Audio necesita configuraci√≥n en GameScreen');
    }
} else {
    console.log('   ‚ùå GameScreen.tsx no encontrado');
}

// 4. Verificar que App.tsx pase la funci√≥n a las pantallas
console.log('\n4Ô∏è‚É£ Verificando paso de funci√≥n desde App.tsx...');
if (fs.existsSync(appPath)) {
    const appContent = fs.readFileSync(appPath, 'utf8');

    const passesToLevelSelect = appContent.includes('onShowAudioSettings={handleShowAudioSettings}');
    const passesToGameScreen = appContent.includes('onShowAudioSettings={handleShowAudioSettings}');

    console.log('   ‚úÖ Pasa funci√≥n a LevelSelectScreen:', passesToLevelSelect);
    console.log('   ‚úÖ Pasa funci√≥n a GameScreen:', passesToGameScreen);

    if (passesToLevelSelect && passesToGameScreen) {
        console.log('   üéâ App.tsx pasa correctamente la funci√≥n a todas las pantallas');
    } else {
        console.log('   ‚ö†Ô∏è App.tsx no pasa la funci√≥n a todas las pantallas');
    }
}

// 5. Resumen de implementaci√≥n
console.log('\nüìã Resumen de implementaci√≥n del bot√≥n de audio:');
console.log('   ‚Ä¢ Bot√≥n de audio en pantalla principal (App.tsx)');
console.log('   ‚Ä¢ Bot√≥n de audio en selecci√≥n de niveles (LevelSelectScreen)');
console.log('   ‚Ä¢ Bot√≥n de audio en pantalla de juego (GameScreen)');
console.log('   ‚Ä¢ Modal de AudioSettings accesible desde todas las pantallas');
console.log('   ‚Ä¢ Funci√≥n handleShowAudioSettings compartida');

console.log('\nüéØ Funcionalidades del bot√≥n de audio:');
console.log('   ‚Ä¢ Control de volumen de m√∫sica');
console.log('   ‚Ä¢ Control de volumen de efectos de sonido');
console.log('   ‚Ä¢ Activar/desactivar m√∫sica');
console.log('   ‚Ä¢ Activar/desactivar efectos de sonido');
console.log('   ‚Ä¢ Configuraci√≥n persistente');

console.log('\nüì± Ubicaci√≥n del bot√≥n:');
console.log('   ‚Ä¢ Header superior derecho en todas las pantallas');
console.log('   ‚Ä¢ Icono üîä para f√°cil identificaci√≥n');
console.log('   ‚Ä¢ Estilo consistente con el resto de la UI');
console.log('   ‚Ä¢ Accesible en cualquier momento del juego');

console.log('\n‚úÖ Script completado'); 