const fs = require('fs');
const path = require('path');

console.log('üéØ Verificando c√°lculo de posiciones...\n');

// Verificar que el archivo Grid.tsx existe
const gridPath = path.join(__dirname, '..', 'components', 'Grid.tsx');
if (!fs.existsSync(gridPath)) {
    console.error('‚ùå No se encontr√≥ el archivo Grid.tsx');
    process.exit(1);
}

// Leer el contenido del archivo
const gridContent = fs.readFileSync(gridPath, 'utf8');

console.log('üîç Verificando correcciones implementadas:');

const checks = [
    {
        name: 'Key usa √≠ndices del array (colIndex, rowIndex)',
        result: gridContent.includes('const key = `${colIndex},${rowIndex}`; // Usar √≠ndices del array, no coordenadas l√≥gicas')
    },
    {
        name: 'findCellAtPosition usa √≠ndices correctos',
        result: gridContent.includes('const [colIndex, rowIndex] = key.split(\',\').map(Number);')
    },
    {
        name: 'Retorna celda usando √≠ndices correctos',
        result: gridContent.includes('return grid[rowIndex]?.[colIndex] || null;')
    },
    {
        name: 'Logs muestran coordenadas l√≥gicas y de grid',
        result: gridContent.includes('Cell (${cell.x}, ${cell.y}) [grid: ${colIndex},${rowIndex}]')
    }
];

let allPassed = true;
checks.forEach(check => {
    const status = check.result ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${check.name}`);
    if (!check.result) allPassed = false;
});

console.log('\nüéÆ Verificando flujo de c√°lculo:');

const flowChecks = [
    {
        name: 'calculateCellPositions usa colIndex y rowIndex',
        result: gridContent.includes('const key = `${colIndex},${rowIndex}`')
    },
    {
        name: 'Posiciones calculadas con padding correcto',
        result: gridContent.includes('posX = colIndex * (cellSize + 2) + 4')
    },
    {
        name: 'findCellAtPosition busca en posiciones correctas',
        result: gridContent.includes('x >= pos.x && x <= pos.x + pos.width')
    },
    {
        name: 'Mapeo de key a √≠ndices correcto',
        result: gridContent.includes('const [colIndex, rowIndex] = key.split(\',\').map(Number);')
    }
];

flowChecks.forEach(check => {
    const status = check.result ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${check.name}`);
    if (!check.result) allPassed = false;
});

console.log('\nüìä Resumen de la correcci√≥n:');

if (allPassed) {
    console.log('üéâ ¬°El c√°lculo de posiciones est√° corregido!');
    console.log('\n‚úÖ Problemas corregidos:');
    console.log('   ‚Ä¢ Key usa √≠ndices del array (colIndex, rowIndex)');
    console.log('   ‚Ä¢ findCellAtPosition usa √≠ndices correctos');
    console.log('   ‚Ä¢ Retorna celda usando grid[rowIndex][colIndex]');
    console.log('   ‚Ä¢ Logs muestran tanto coordenadas l√≥gicas como de grid');

    console.log('\nüöÄ Flujo esperado:');
    console.log('   1. calculateCellPositions: key = `${colIndex},${rowIndex}`');
    console.log('   2. findCellAtPosition: [colIndex, rowIndex] = key.split(\',\')');
    console.log('   3. Retorna: grid[rowIndex][colIndex]');
    console.log('   4. Coordenadas l√≥gicas (cell.x, cell.y) vs √≠ndices (colIndex, rowIndex)');

    console.log('\nüß™ Para probar:');
    console.log('   1. Toca en diferentes celdas del grid');
    console.log('   2. Verifica que detecte la celda correcta');
    console.log('   3. Verifica que el n√∫mero 1 se detecte en su posici√≥n real');
    console.log('   4. Verifica que arrastre funcione en todas las celdas');

} else {
    console.log('‚ùå Hay problemas en el c√°lculo de posiciones');
    console.log('\nüîß Revisa:');
    console.log('   ‚Ä¢ Que key use √≠ndices del array');
    console.log('   ‚Ä¢ Que findCellAtPosition use √≠ndices correctos');
    console.log('   ‚Ä¢ Que retorne celda con √≠ndices correctos');
    console.log('   ‚Ä¢ Que los logs muestren informaci√≥n √∫til');
}

console.log('\nüß™ Verificaci√≥n completada.'); 