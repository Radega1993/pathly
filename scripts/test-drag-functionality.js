const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ Probando funcionalidad de arrastre en Grid...\n');

// Verificar que el archivo Grid.tsx existe
const gridPath = path.join(__dirname, '..', 'components', 'Grid.tsx');
if (!fs.existsSync(gridPath)) {
    console.error('‚ùå No se encontr√≥ el archivo Grid.tsx');
    process.exit(1);
}

// Leer el contenido del archivo
const gridContent = fs.readFileSync(gridPath, 'utf8');

// Verificar que se import√≥ PanResponder
if (!gridContent.includes('import {') || !gridContent.includes('PanResponder')) {
    console.error('‚ùå PanResponder no est√° importado en Grid.tsx');
    process.exit(1);
}

console.log('‚úÖ PanResponder est√° importado correctamente');

// Verificar que se a√±adieron los estados necesarios
const requiredStates = [
    'isDragging',
    'lastProcessedCell',
    'gridLayout'
];

for (const state of requiredStates) {
    if (!gridContent.includes(`const [${state}`)) {
        console.error(`‚ùå Estado ${state} no est√° definido`);
        process.exit(1);
    }
    console.log(`‚úÖ Estado ${state} est√° definido`);
}

// Verificar que se a√±adieron las funciones necesarias
const requiredFunctions = [
    'getCellAtPosition',
    'screenToCellCoordinates',
    'processDrag',
    'onGridLayout'
];

for (const func of requiredFunctions) {
    if (!gridContent.includes(`const ${func}`)) {
        console.error(`‚ùå Funci√≥n ${func} no est√° definida`);
        process.exit(1);
    }
    console.log(`‚úÖ Funci√≥n ${func} est√° definida`);
}

// Verificar que se configur√≥ PanResponder
if (!gridContent.includes('PanResponder.create')) {
    console.error('‚ùå PanResponder no est√° configurado');
    process.exit(1);
}
console.log('‚úÖ PanResponder est√° configurado');

// Verificar que se a√±adieron los handlers al grid
if (!gridContent.includes('{...panResponder.panHandlers}')) {
    console.error('‚ùå PanResponder handlers no est√°n aplicados al grid');
    process.exit(1);
}
console.log('‚úÖ PanResponder handlers est√°n aplicados al grid');

// Verificar que se a√±adi√≥ onLayout
if (!gridContent.includes('onLayout={onGridLayout}')) {
    console.error('‚ùå onLayout no est√° configurado');
    process.exit(1);
}
console.log('‚úÖ onLayout est√° configurado');

// Verificar que se mantiene la funcionalidad existente
const existingFeatures = [
    'handleCellPress',
    'handleCellLongPress',
    'addCellToPath',
    'isCellValidNext'
];

for (const feature of existingFeatures) {
    if (!gridContent.includes(`const ${feature}`)) {
        console.error(`‚ùå Funci√≥n existente ${feature} no est√° presente`);
        process.exit(1);
    }
    console.log(`‚úÖ Funci√≥n existente ${feature} est√° presente`);
}

console.log('\nüéâ ¬°Todas las verificaciones pasaron!');
console.log('\nüìã Resumen de la implementaci√≥n:');
console.log('   ‚úÖ PanResponder importado y configurado');
console.log('   ‚úÖ Estados de arrastre a√±adidos');
console.log('   ‚úÖ Funciones de mapeo de coordenadas implementadas');
console.log('   ‚úÖ Handlers aplicados al grid');
console.log('   ‚úÖ Funcionalidad existente mantenida');
console.log('\nüöÄ La funcionalidad de arrastre est√° lista para probar');
console.log('   - Los usuarios pueden arrastrar el dedo para dibujar el camino');
console.log('   - Se mantiene la compatibilidad con clics individuales');
console.log('   - Solo se procesan celdas adyacentes v√°lidas');
console.log('   - Se evita el procesamiento repetitivo de la misma celda'); 